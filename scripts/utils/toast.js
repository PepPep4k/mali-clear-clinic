export class ToastManager {
    constructor() {
        this.toasts = [];
        this.id = 0;
    }

    addToast(type, title, message) {
        console.log("üîç Debug Toast Input:", { type, title, message });

        if (!title || !message) {
            console.error("‚ùå Toast Error: title ‡∏´‡∏£‡∏∑‡∏≠ message ‡∏ß‡πà‡∏≤‡∏á");
            return;
        }

        title = sanitizeText(title);
        message = sanitizeText(message);

        console.log("‚úÖ After Sanitize:", { type, title, message });

        try {
            const newToast = { id: ++this.id, type, title, message };
            this.toasts.push(newToast);
            this.updateUI();

            setTimeout(() => this.removeToast(newToast.id), 4000);
        } catch (error) {
            console.error("‚ùå Toast Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Toast ‡πÑ‡∏î‡πâ", error);
        }
    }

    removeToast(id) {
        this.toasts = this.toasts.filter(toast => toast.id !== id);
        this.updateUI();
    }

    updateUI() {
        const toastContainer = document.querySelector("toast-container");
        if (toastContainer) {
            toastContainer.renderToasts(this.toasts);
        }
    }
}

// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î InvalidCharacterError
function sanitizeText(text) {
    if (typeof text !== "string" || !text.trim()) return "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    return text
        .normalize("NFKD")
        .replace(/[\u0000-\u001F\u007F-\u009F]/g, "")
        .replace(/[^\w\s‡∏Å-‡πô.,!?'"()\[\]{}<>:;-]/g, "");
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏ô‡∏™‡πÅ‡∏ï‡∏ô‡∏ã‡πå‡∏Ç‡∏≠‡∏á ToastManager
export const toastManager = new ToastManager();